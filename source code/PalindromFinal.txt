package Plaindrome;
import java.util.Scanner;
public class Plain1 {
		
		public static void main(String[] args) {

	        Scanner scanner = new Scanner(System.in);

	        String text = scanner.nextLine();

	        if (is_Palindrome(text))
	            System.out.println("Is Palindrome");
	        else
	            System.out.println("Is not Palindrome");

	    }
		    public static char lower(char c) {  //To convert capital to small
		        int asci = (int) c;
		        if (asci >= 65 && asci <= 90)
		            return (char)(asci + 32);
		        return c;
		    }

		    public static boolean is_equal(char[] s1, char[] s2) {

		        if (s1.length != s2.length)
		            return false;

		        for (int i = 0; i < s1.length; i++) {
		            if (lower(s1[i]) != lower(s2[i]))
		                return false;
		        }

		        return true;
		    }


		    public static boolean is_Palindrome(String text) { 
		        
		        char [] s = text.toCharArray();
		        
		        LinkedStack stack = new LinkedStack();
		        
		        for (int i = 0; i < s.length; i++) {
		            stack.push(s[i]);
		        }
		        
		        char[] reversed = new char[s.length];
		        for (int i = 0; i < s.length; i++) {
		            reversed[i] = stack.top();
		            stack.pop();
		        }
		        
		        return is_equal(s, reversed);
		    }

		    
		

	}


===========================================
package p3;


public class LinkedStack {

	private class Node {

		char data;
		Node next;

		public Node(char data) {
			this.data=data;
		}

	}
	
	 Node top=null;
	
	void push(char data)
	{
		Node newNode= new Node(data);
		if (top== null)
		{
			top=newNode;
		}
		
		else
		{
			newNode.next=top;
			top=newNode;
		}
				
	}
	boolean isEmpty()
	{
		return top==null;
	}
	
	void print() //O(n)
	{
		Node i=top;
		while(i != null)
		{
			System.out.println(i.data);
			i=i.next;
		}
	}
	
	char pop()
	{
		char element;
		if(isEmpty())
		{
		throw new IllegalArgumentException();
		}
		
		else
		{
			element=top.data;
		Node delete=top;
		top=top.next;
		delete.next=null;
		}
		return element;
	}
	
	void push_from_string(String data)
	{
		
		
		for(int i=0; i<data.length();i++)
		{
			Node newNode = new Node(data.charAt(i));
			
			if(top==null)
			{
				top=newNode;
			}
			else
			{
				newNode.next=top;
				top=newNode;
			}
		}
	}
	
	String pop_all()
	{
		String result = "";
		
		while(top!=null)
		{
			result+=top.data;
			top=top.next;
		}
		return result;
	}
	
	char top()
	{
		return top.data;
	}
	
}
